import bcrypt from 'bcryptjs';
import { connectDB, query } from '../src/utils/databaseSqlite.js';

async function updateUserPasswords() {
  try {
    console.log('üîÑ Conectando a la base de datos...');
    await connectDB();

    console.log('üîê Generando hashes de contrase√±as...');
    
    // Generar hashes para las contrase√±as
    const adminHash = await bcrypt.hash('admin123', 12);
    const tecnicoHash = await bcrypt.hash('tecnico123', 12);
    const empleadoHash = await bcrypt.hash('empleado123', 12);

    console.log('‚úçÔ∏è Actualizando contrase√±as en la base de datos...');

    // Actualizar contrase√±a del admin
    await query(
      'UPDATE users SET password_hash = $1 WHERE email = $2',
      [adminHash, 'admin@farmashaio.com']
    );

    // Actualizar contrase√±a del t√©cnico
    await query(
      'UPDATE users SET password_hash = $1 WHERE email = $2',
      [tecnicoHash, 'tecnico1@farmashaio.com']
    );

    // Actualizar contrase√±a del empleado
    await query(
      'UPDATE users SET password_hash = $1 WHERE email = $2',
      [empleadoHash, 'empleado1@farmashaio.com']
    );

    console.log('‚úÖ Contrase√±as actualizadas exitosamente');
    
    // Verificar los usuarios actualizados
    console.log('üìã Verificando usuarios en la base de datos:');
    const users = await query('SELECT id, username, email, role FROM users');
    
    users.rows.forEach(user => {
      console.log(`   - ${user.email} (${user.role})`);
    });

    console.log('\nüîê Credenciales de acceso:');
    console.log('   Admin: admin@farmashaio.com / admin123');
    console.log('   T√©cnico: tecnico1@farmashaio.com / tecnico123');
    console.log('   Empleado: empleado1@farmashaio.com / empleado123');

  } catch (error) {
    console.error('‚ùå Error actualizando contrase√±as:', error.message);
    process.exit(1);
  }
}

updateUserPasswords();